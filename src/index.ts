import dotenv from 'dotenv';
import { Telegraf, Context } from 'telegraf';
import express from 'express';
import helmet from 'helmet';
import cors from 'cors';
import { SocksProxyAgent } from 'socks-proxy-agent';
import { HttpsProxyAgent } from 'https-proxy-agent';
import { setupDatabase } from './services/database';
import { setupLogger } from './utils/logger';
import { BottleService } from './services/bottle-service';
import { PointsService } from './services/points-service';
import { NotificationService } from './services/notification-service';
import { BroadcastService } from './services/broadcast-service';
import { Scheduler } from './utils/scheduler';
import { setupCommands } from './bot/commands';
import { setupHandlers } from './bot/handlers';

// Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
dotenv.config();

const logger = setupLogger();

class PalsBot {
    private bot: Telegraf<Context>;
    private app: express.Application;

    constructor() {
        if (!process.env.BOT_TOKEN) {
            throw new Error('BOT_TOKEN is required');
        }
        
        // ÂàõÂª∫Êú∫Âô®‰∫∫ÂÆû‰æãÔºåÊîØÊåÅ‰ª£ÁêÜ
        const botOptions: any = {};
        
        // Ê£ÄÊü•ÊòØÂê¶ÈÖçÁΩÆ‰∫Ü‰ª£ÁêÜ
        if (process.env.PROXY_URL) {
            logger.info(`‰ΩøÁî®‰ª£ÁêÜ: ${process.env.PROXY_URL}`);
            
            if (process.env.PROXY_URL.startsWith('socks')) {
                botOptions.telegram = {
                    agent: new SocksProxyAgent(process.env.PROXY_URL)
                };
            } else if (process.env.PROXY_URL.startsWith('http')) {
                botOptions.telegram = {
                    agent: new HttpsProxyAgent(process.env.PROXY_URL)
                };
            }
        }
        
        this.bot = new Telegraf(process.env.BOT_TOKEN, botOptions);
        this.app = express();
        
        this.setupExpress();
        this.setupBot();
    }

    private setupExpress() {
        this.app.use(helmet());
        this.app.use(cors());
        this.app.use(express.json());

        // ÂÅ•Â∫∑Ê£ÄÊü•Á´ØÁÇπ
        this.app.get('/health', (req, res) => {
            res.json({
                status: 'ok',
                timestamp: new Date().toISOString(),
                uptime: process.uptime(),
                memory: process.memoryUsage()
            });
        });

        // Êú∫Âô®‰∫∫Áä∂ÊÄÅÁ´ØÁÇπ
        this.app.get('/bot/status', async (req, res) => {
            try {
                const me = await this.bot.telegram.getMe();
                const stats = await BottleService.getGlobalStats();
                res.json({
                    bot: me,
                    status: 'running',
                    stats
                });
            } catch (error) {
                res.status(500).json({
                    status: 'error',
                    error: error instanceof Error ? error.message : 'Unknown error'
                });
            }
        });

        // ÁßØÂàÜÊéíË°åÊ¶úAPIÁ´ØÁÇπ
        this.app.get('/api/leaderboard', async (req, res) => {
            try {
                const limit = parseInt(req.query.limit as string) || 10;
                const leaderboard = await PointsService.getLeaderboard(limit);
                res.json({
                    success: true,
                    data: leaderboard
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error instanceof Error ? error.message : 'Unknown error'
                });
            }
        });

        // ÁßØÂàÜÂïÜÂ∫óAPIÁ´ØÁÇπ
        this.app.get('/api/shop', async (req, res) => {
            try {
                const category = req.query.category as string;
                const items = await PointsService.getShopItems(category);
                res.json({
                    success: true,
                    data: items
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error instanceof Error ? error.message : 'Unknown error'
                });
            }
        });
    }

    private setupBot() {
        try {
            logger.info('ÂºÄÂßãËÆæÁΩÆÊú∫Âô®‰∫∫...');
            
            // ËÆæÁΩÆÈÄöÁü•ÊúçÂä°ÁöÑbotÂÆû‰æã
            NotificationService.setBotInstance(this.bot);
            
            // ËÆæÁΩÆÂπøÊí≠ÊúçÂä°ÁöÑbotÂÆû‰æã
            BroadcastService.setBotInstance(this.bot);
            
            // ËÆæÁΩÆÂëΩ‰ª§
            setupCommands(this.bot);
            logger.info('‚úÖ ÂëΩ‰ª§ËÆæÁΩÆÂÆåÊàê');
            
            // ËÆæÁΩÆÊ∂àÊÅØÂ§ÑÁêÜÂô®
            setupHandlers(this.bot);
            logger.info('‚úÖ Ê∂àÊÅØÂ§ÑÁêÜÂô®ËÆæÁΩÆÂÆåÊàê');

            // ÈîôËØØÂ§ÑÁêÜ
            this.bot.catch((err, ctx) => {
                logger.error('Bot error:', err);
                ctx.reply('Êä±Ê≠âÔºåÂ§ÑÁêÜÊÇ®ÁöÑËØ∑Ê±ÇÊó∂Âá∫Áé∞‰∫ÜÈîôËØØ„ÄÇËØ∑Á®çÂêéÈáçËØï„ÄÇ');
            });
            
            logger.info('üéâ Êú∫Âô®‰∫∫ËÆæÁΩÆÂÆåÊàê');
            
        } catch (error) {
            logger.error('Êú∫Âô®‰∫∫ËÆæÁΩÆÂ§±Ë¥•:', error);
            throw error;
        }
    }

    async start() {
        try {
            // ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì
            await setupDatabase();
            logger.info('Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂÆåÊàê');

            // ÂêØÂä®ÂÆöÊó∂‰ªªÂä°
            Scheduler.startAll();
            logger.info('ÂÆöÊó∂‰ªªÂä°ÂêØÂä®ÂÆåÊàê');

            // ÂêØÂä®ExpressÊúçÂä°Âô®
            const port = process.env.PORT || 3000;
            this.app.listen(port, () => {
                logger.info(`HTTPÊúçÂä°Âô®ÂêØÂä®Âú®Á´ØÂè£ ${port}`);
            });

            // ÊµãËØïTelegramËøûÊé•
            logger.info('Ê≠£Âú®ÊµãËØïTelegramËøûÊé•...');
            const me = await this.bot.telegram.getMe();
            logger.info(`Êú∫Âô®‰∫∫‰ø°ÊÅØ: @${me.username} (${me.first_name})`);

            // ÂêØÂä®Êú∫Âô®‰∫∫
            await this.bot.launch();
            logger.info('TelegramÊú∫Âô®‰∫∫ÂêØÂä®ÊàêÂäü');

            // ËæìÂá∫ÂêØÂä®ÊàêÂäü‰ø°ÊÅØ
            logger.info('üéâ ÊºÇÊµÅÁì∂Êú∫Âô®‰∫∫ÔºàÂê´ÁßØÂàÜÁ≥ªÁªüÔºâÂêØÂä®ÊàêÂäüÔºÅ');
            logger.info('ÊîØÊåÅÁöÑÂäüËÉΩ:');
            logger.info('üìù ÊºÇÊµÅÁì∂ÊäïÊîæ„ÄÅÊç°Êãæ„ÄÅÂõûÂ§ç');
            logger.info('üí∞ ÂÆåÊï¥ÁöÑÁßØÂàÜÁ≥ªÁªü');
            logger.info('üõí ÁßØÂàÜÂïÜÂ∫ó');
            logger.info('üèÜ Á≠âÁ∫ßÁ≥ªÁªü');
            logger.info('üéØ ÊàêÂ∞±Á≥ªÁªü');
            logger.info('üíé VIP‰ºöÂëòÁ≥ªÁªü');

            // ‰ºòÈõÖÂÖ≥Èó≠
            process.once('SIGINT', () => this.stop('SIGINT'));
            process.once('SIGTERM', () => this.stop('SIGTERM'));

        } catch (error) {
            logger.error('ÂêØÂä®Â§±Ë¥•:', error);
            
            if (error instanceof Error && error.message.includes('ETIMEDOUT')) {
                logger.error('ÁΩëÁªúËøûÊé•Ë∂ÖÊó∂ÔºåËØ∑Ê£ÄÊü•Ôºö');
                logger.error('1. ÁΩëÁªúËøûÊé•ÊòØÂê¶Ê≠£Â∏∏');
                logger.error('2. ÊòØÂê¶ÈúÄË¶ÅÈÖçÁΩÆ‰ª£ÁêÜ (ËÆæÁΩÆ PROXY_URL ÁéØÂ¢ÉÂèòÈáè)');
                logger.error('3. Bot Token ÊòØÂê¶Ê≠£Á°Æ');
            }
            
            process.exit(1);
        }
    }

    private stop(signal: string) {
        logger.info(`Êî∂Âà∞ ${signal} ‰ø°Âè∑ÔºåÊ≠£Âú®ÂÖ≥Èó≠...`);
        
        // ÂÅúÊ≠¢ÂÆöÊó∂‰ªªÂä°
        Scheduler.stopAll();
        
        // ÂÅúÊ≠¢Êú∫Âô®‰∫∫
        this.bot.stop(signal);
        process.exit(0);
    }
}

// ÂêØÂä®Â∫îÁî®
const bot = new PalsBot();
bot.start().catch(error => {
    console.error('ÂêØÂä®Â§±Ë¥•:', error);
    process.exit(1);
}); 